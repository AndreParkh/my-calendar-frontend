name: deploy_test.yml
on:
  pull_request:
    branches: [master]
    types: [ opened, reopened, edited, synchronize ]

jobs:
  # Job 1: Сборка проекта
  build:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Checkout кода
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: npm

      # Шаг 3: Установка зависимостей
      - name: Install dependencies
        run: npm install

      # Шаг 4: Сборка проекта
      - name: build project
        run: npm run build

  # Job 2: Сборка docker образа
  build-docker-image:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Checkout кода
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: npm

      # Шаг 3: Установка зависимостей
      - name: Install dependencies
        run: npm install

      # Шаг 4: Сборка проекта
      - name: build project
        run: npm run build

      - name: build docker image
        run: docker build --build-arg API_DOMAIN=${{ secrets.API_DOMAIN }} -t my-calendar-frontend-pr:${{ github.sha }} .

  # Job 3: Публикация docker образа
  publish-docker-image:
    needs: build-docker-image
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Checkout кода
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: npm

      # Шаг 3: Установка зависимостей
      - name: Install dependencies
        run: npm install

      # Шаг 4: Сборка проекта
      - name: build project
        run: npm run build

      # Шаг 5: Сборка Docker-образа
      - name: build docker image
        run:
          docker build --build-arg API_DOMAIN=${{ secrets.API_DOMAIN }} -t my-calendar-frontend-pr:latest .

      # Шаг 6: Логин в Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Шаг 7: Переименование образа
      - name: Tag Docker image
        run: docker tag my-calendar-frontend-pr:latest ${{ secrets.DOCKER_HUB_USERNAME }}/my-calendar-frontend-pr:latest

      # Шаг 8: Публикация Docker-образа
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-calendar-frontend-pr:latest

  # Job 4:
  deploy-pr:
    runs-on: ubuntu-22.04

    steps:
      - name: install SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_PRIVATE_KEY }}

      - name: Deploy Docker Compose on VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} <<EOF
          cd /home/${{ secrets.VPS_USERNAME }}/test/my-calendar-frontend
          sudo docker rmi ${{ secrets.DOCKER_HUB_USERNAME }}/my-calendar-frontend-pr
          docker run -p 5010:5003 --name pull-request ${{ secrets.DOCKER_HUB_USERNAME }}/my-calendar-frontend-pr
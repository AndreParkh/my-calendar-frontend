name: deploy_test.yml
on:
  pull_request:
    branches: [master]
    types: [ opened, reopened, edited, synchronize ]

jobs:
  # Job 1: Сборка проекта
  build:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Checkout кода
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: npm

      # Шаг 3: Установка зависимостей
      - name: Install dependencies
        run: npm install

      # Шаг 4: Сборка проекта
      - name: build project
        run: npm run build

  # Job 2: Сборка docker образа
  build-docker-image:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Checkout кода
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: npm

      # Шаг 3: Установка зависимостей
      - name: Install dependencies
        run: npm install

      # Шаг 4: Сборка проекта
      - name: build project
        run: npm run build

      - name: build docker image
        run: docker build --build-arg API_DOMAIN=${{ secrets.API_DOMAIN }} -t my-calendar-frontend-pr:${{ github.sha }} .

  # Job 3: Публикация docker образа
  publish-docker-image:
    needs: build-docker-image
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Checkout кода
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: npm

      # Шаг 3: Установка зависимостей
      - name: Install dependencies
        run: npm install

      # Шаг 4: Сборка проекта
      - name: build project
        run: npm run build

      # Шаг 5: Сборка Docker-образа
      - name: build docker image
        run:
          docker build --build-arg API_DOMAIN=${{ secrets.API_DOMAIN }} -t my-calendar-frontend-pr:latest .

      # Шаг 6: Логин в Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Шаг 7: Переименование образа
      - name: Tag Docker image
        run: docker tag my-calendar-frontend-pr:latest ${{ secrets.DOCKER_HUB_USERNAME }}/my-calendar-frontend-pr:latest

      # Шаг 8: Публикация Docker-образа
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-calendar-frontend-pr:latest

  # Job
  trigger-deploy:
    needs: publish-docker-image
    runs-on: ubuntu-latest

    steps:
      - name: Trigger deploy event in my-calendar-docker-compose
        id: trigger-deploy
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repository: andreparkh/my-calendar-docker-compose
          event-type: deploy-test
          client-payload: '{"message": "Deploy triggered from my-calendar-frontend"}'

      - name: Wait for Docker Job to Complete
        run: |
          sleep 10
          REPO_PATH=https:/api.github.com/repos/andreparkh/my-calendar-docker-compose
          WORKFLOW_RUN_ID=$(curl -s -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            $REPO_PATH/actions/runs | jq -r '.workflow_runs[0].id')
          echo "WORKFLOW_RUN_ID = $WORKFLOW_RUN_ID"
          while true; do
            STATUS=$(curl -s -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              $REPO_PATH/actions/runs/$WORKFLOW_RUN_ID | jq -r '.status')
            echo "STATUS: $STATUS"
            if [ "$STATUS" == "completed" ]; then
              CONCLUSION=$(curl -s -H "Autorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
                $REPO_PARH/actions/runs/$WORKFLOW_RUN_ID | jq -r '.conclusion')
              if [ "$CONCLUSION" == "success" ]; then
                echo "Deploy completed successfully!"
                exit 0
              else 
                echo "Deploy failed!"
                exit 1
              fi
            fi
            echo "Waiting for Docker job to complete..."
            sleep 10
          done